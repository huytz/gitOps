# -- Replica count for the deployment. It is not advised to run more than one replica.
replicaCount: 1
image:
  # -- Default image repository
  repository: quay.io/argoprojlabs/argocd-image-updater
  # -- Default image pull policy
  pullPolicy: Always
  # -- Overrides the image tag whose default is the chart appVersion
  tag: ""

config:
  # -- Name of the ConfigMap
  name: argocd-image-updater-config
  # -- API kind that is used to manage Argo CD applications (`kubernetes` or `argocd`)
  applicationsAPIKind: ""

  # Described in detail here https://argocd-image-updater.readthedocs.io/en/stable/install/reference/#flags
  # Note: this is only relevant if config.applicationsAPIKind == 'argocd'
  argocd:
    # -- Use the gRPC-web protocol to connect to the Argo CD API
    grpcWeb: true
    # -- Connect to the Argo CD API server at server address
    serverAddress: ""
    # -- If specified, the certificate of the Argo CD API server is not verified.
    insecure: false
    # -- If specified, use an unencrypted HTTP connection to the Argo CD API instead of TLS.
    plaintext: false
    # -- If specified, the secret with Argo CD API key will be created.
    token: ""
    # -- Name of the Secret containing the token
    tokenSecretName: "argocd-image-updater-secret"

  # -- Disable kubernetes events
  disableKubeEvents: false

  # -- Username to use for Git commits
  gitCommitUser: ""

  # -- E-Mail address to use for Git commits
  gitCommitMail: ""

  # -- Changing the Git commit message
  gitCommitTemplate: ""

  # -- Path to public SSH key mounted in container, or GPG key ID used to sign commits
  gitCommitSigningKey: ""

  # -- Enables sign off on commits
  gitCommitSignOff: false

  # -- Method used to sign Git commits. `openpgp` or `ssh`
  gitCommitSigningMethod: ""

  # -- Argo CD Image Update log level
  logLevel: "info"

  # -- Argo CD Image Updater registries list configuration. More information [here](https://argocd-image-updater.readthedocs.io/en/stable/configuration/registries/).
  registries: []
    # - name: Docker Hub
    #   api_url: https://registry-1.docker.io
    #   ping: yes
    #   credentials: secret:foo/bar#creds
    #   defaultns: library
    # - name: Google Container Registry
    #   api_url: https://gcr.io
    #   prefix: gcr.io
    #   ping: no
    #   credentials: pullsecret:foo/bar
    # - name: RedHat Quay
    #   api_url: https://quay.io
    #   ping: no
    #   prefix: quay.io
    #   credentials: env:REGISTRY_SECRET
    # - name: ECR
    #   api_url: https://123456789.dkr.ecr.eu-west-1.amazonaws.com
    #   prefix: 123456789.dkr.ecr.eu-west-1.amazonaws.com
    #   ping: yes
    #   insecure: no
    #   credentials: ext:/scripts/auth1.sh
    #   credsexpire: 10h
    # - name: Azure Container Registry
    #   api_url: https://acr1.azurecr.io
    #   prefix: acr1.azurecr.io
    #   ping: yes
    #   credentials: ext:/scripts/azure-workload-identity.sh
    #   credsexpire: 1h

  sshConfig:
    # -- Name of the sshConfig ConfigMap
    name: argocd-image-updater-ssh-config
    # -- Argo CD Image Updater ssh client parameter configuration
    config: ""
    #  config: |
    #    Host *
    #          PubkeyAcceptedAlgorithms +ssh-rsa
    #          HostkeyAlgorithms +ssh-rsa

# whether to mount authentication scripts, if enabled, the authentication scripts will be mounted on /scripts that can be used to authenticate with registries (Azure, ECR)
# refer to https://argocd-image-updater.readthedocs.io/en/stable/configuration/registries/#specifying-credentials-for-accessing-container-registries for more info
authScripts:
  # -- Whether to mount the defined scripts that can be used to authenticate with a registry, the scripts will be mounted at `/scripts`
  enabled: false
  # -- Name of the authentication scripts ConfigMap
  name: argocd-image-updater-authscripts
  # -- Map of key-value pairs where the key consists of the name of the script and the value the contents.
  ## Expect the script to output Docker credentials in the form: <username>:<password>
  ## Authentication scripts can be used for various cloud providers like ECR or Azure Workload Identity.
  ## For Azure Workload Identity, you can place your authentication script here to handle token acquisition.
  scripts: {}
    # auth1.sh: |
    #   #!/bin/sh
    #   echo "auth script 1 here"
    # auth2.sh: |
    #   #!/bin/sh
    #   echo "auth script 2 here"
    # azure-workload-identity.sh: |
    #   #!/bin:sh
    #   # Example script for Azure Workload Identity.
    #   # This script would typically use environment variables set by the workload identity
    #   # to acquire an Azure AD token and authenticate with Azure Container Registry (ACR).
    #   # It should output the Docker username and password on stdout, e.g., '00000000-0000-0000-0000-000000000000:<token>'


rbac:
  # -- Enable RBAC creation
  enabled: true

# Metrics configuration
metrics:
  # -- Deploy metrics service
  enabled: true
